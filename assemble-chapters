#!/bin/bash
#
# This script will assemble a bunch of separate PDFs in a directory
# hierarchy into a single pdf with bookmarks to each individual file.
#
# requires: JPdfBookmarks
# http://flavianopetrocchi.blogspot.com/2008/07/jpsdbookmarks-download-page.html
#
# Your files should be arranged like this:
#     book/01-Introduction.pdf
#     book/02-Engine
#     book/02-Engine/01-Oil.pdf
#     book/02-Engine/01-Freeze Plugs.pdf
#
# Then just fire it up to display the bookmarks it would set:
#     $ assemble-chapters book
# If it looks good, then tell it to go ahead and do it:
#     $ assemble-chapters book --go
#
# NOTE: The first dash in and everything before it will be stripped!
# If you want to change the chapter prefix (to use, say "a. Chapter"
# instead of "01-Chapter") modify the fix_filename function.
#
# Thanks to fpmurphy's fast PDF page counting snippet:
#	http://www.unix.com/shell-programming-scripting/55661-how-get-number-pages-pdf-file.html


root="$1"
oldifs="$IFS"
if [ "x$root" = "x" ]; then root="."; fi

# set this to non-empty to turn on debug messages
debug=


# Strips the numbering from file and directory names.  My files are
# numbered "01-blah", so ${1#*-} returns "blah" in filename.  If
# your pages are numbered with periods, just change the dash to a period.
# See http://mywiki.wooledge.org/BashFAQ/073 for more on how this works.
fix_filename() {
	filename="${1#*-}"
}


count_pdf_pages() {
	page_count=0
	while read num; do
		# Turns "BLA BLA/Count 21314BLA BLA" into 21314
		num="${num#*/Count }"
		num="${num%%[!0-9]*}"
		(($num > $page_count)) && page_count=$num
	done < <(strings "$1" | grep "/Count")
	echo -n "$page_count"
}

# Test out the PDF page counting method if called with "--count bla.pdf"
if [ "x$1" = "x--count" ]; then
	while true; do
		shift
		[ -z "$1" ] && exit
		echo $(count_pdf_pages "$1")" $1"
	done
fi


# If the previous path and current path contain different directories,
# this function prints the lines needed to get them back in sync.
print_differing() {
	while true; do
		fix_filename "${entries[$idir]}"
		echo "$prestr$filename"
		stack[$idir]="${entries[$idir]}"
		prestr="$prestr"$(echo -en "\t")
		[ $((idir++)) -eq $lastdir ] && break;
	done
}


find "$root" -name "*.pdf" -print | sort | while read path; do
[ $debug ] && echo "--- path=$path"
	IFS=/ entries=( $path )
	IFS="$oldifs"
	prestr=""
	lastdir=$((${#entries[*]}-2))
	for idir in $(seq 1 $lastdir); do
[ $debug ] && echo "---- stack=${stack[*]}" "entries=${entries[*]}" "idir=$idir" lastdir=$lastdir
		if [ "x${stack[$idir]}" != "x${entries[$idir]}" ]; then
			print_differing
			break
		fi
		prestr="$prestr"$(echo -en "\t")
	done
	fix_filename "${entries[$((lastdir+1))]}"
	echo "$prestr${filename/%\.pdf/}"
done

